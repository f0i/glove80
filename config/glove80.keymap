/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// This layout assumes the host system to use a German keyboard layout!
#include "keys_de.h"

#define HYPER LC(LS(LG(LALT)))

// Ã¸
#define DE_AVG RA(DE_O)

// layers
#define DEFAULT 0
#define SYMBOLS 1
#define GERMAN 2
#define NUMBLOCK 3
#define MAGIC 4

// ZMK behaviors
// &kp key: key press
// &none: nop
// &trans: transparent (use active layer below)
// &mo layer: momentary layer
// &sk key: sticky key (like &kp key but keep pressed until next key is pressed)
// &sl layer: sticky layer
// &to layer: to layer (disable other layers except DEFAULT)
// &lt layer key: layer tab (&mo layer on hold, &kp key on tab)
// &tog layer: toggle layer
// &ht_hp key1 key2: hold tab hold prefered (&kp key1 on hold, &kp key2 on tab)
// &mt key1 key2: mod tap (&ht_hp key1 key2)
// &ht_bl key1 key2: hold tab balanced
// &ht_tp key1 key2: hold tab tab prefered
// &ht_mo_kp layer key: like &ht_bl but with first parameter being a &mo layer
// &ht_mo_to layer1 layer2: like &ht_mo_kp but with second parameter being a &to layer
// &sys_reset: system reset
// &bootloader: start bootloader mode

// Custom behaviors
// &mod_space_tab: mod morph space to tab (&kp SPACE by default, &kp TAB if LSHFT, RSHIFT, LALT or RALT is active)
// &magic layer rgb_ug: MoErgo magic key (tab for keyboard status, hold for magic layer)
// td_symbols: tab dance to SYMBOLS (once for &mo SYMBOLS, twice for &to SYMBOLS)

#define NO_SHIFT(name, key) KP_SHIFT(name, key, key)

#define KP_SHIFT(name, key, shifted)  name: kp_shift_ ## name { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp key>, <&kp shifted>; mods = <(MOD_LGUI|MOD_LSFT|MOD_RSFT)>; }

/ {
    behaviors {
        td_symbols: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl SYMBOLS>, <&to SYMBOLS>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ht_mo_kp: hold_tap_balanced_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        ht_mo_to: hold_tap_balanced_mo_to {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        mod_space_tab: mod_morph_space_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_space_alt_tab: mod_morph_space_alt_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mod_space_tab>, <&kp LA(TAB)>;
            mods = <(MOD_LALT)>;
        };

        mod_bspc_del: mod_morph_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        // the following keys should not be modified by shift
        NO_SHIFT(n0, N0);
        NO_SHIFT(n1, N1);
        NO_SHIFT(n2, N2);
        NO_SHIFT(n3, N3);
        NO_SHIFT(n4, N4);
        NO_SHIFT(n5, N5);
        NO_SHIFT(n6, N6);
        NO_SHIFT(n7, N7);
        NO_SHIFT(n8, N8);
        NO_SHIFT(n9, N9);

        NO_SHIFT(question, DE_QUESTION);
        NO_SHIFT(equal, DE_EQUAL);
        NO_SHIFT(lbrc, DE_LBRC);
        NO_SHIFT(sqt, DE_SQT);
        NO_SHIFT(rbrc, DE_RBRC);
        NO_SHIFT(hash, DE_HASH);
        NO_SHIFT(amps, DE_AMPS);
        NO_SHIFT(excl, DE_EXCL);
        NO_SHIFT(percent, DE_PERCENT);
        NO_SHIFT(plus, DE_PLUS);
        NO_SHIFT(at, DE_AT);
        NO_SHIFT(star, DE_STAR);
        NO_SHIFT(lpar, DE_LPAR);
        NO_SHIFT(dqt, DE_DQT);
        NO_SHIFT(rpar, DE_RPAR);
        NO_SHIFT(less_than, DE_LT); // &lt is already in use for layer-tab
        NO_SHIFT(dollar, DE_DOLLAR);
        NO_SHIFT(pipe, DE_PIPE);
        NO_SHIFT(gt, DE_GT);
        NO_SHIFT(minus, DE_MINUS);
        NO_SHIFT(backslash, DE_BACKSLASH);
        NO_SHIFT(caret, DE_CARET);
        NO_SHIFT(lbkt, DE_LBKT);
        NO_SHIFT(grave, DE_GRAVE);
        NO_SHIFT(rbkt, DE_RBKT);
        NO_SHIFT(tilde, DE_TILDE);
        NO_SHIFT(underscore, DE_UNDERSCORE);
        NO_SHIFT(semi, DE_SEMI);
        NO_SHIFT(colon, DE_COLON);
        NO_SHIFT(slash, DE_SLASH);

        NO_SHIFT(sz, DE_SZ);
        NO_SHIFT(section, DE_SECTION);
        NO_SHIFT(micro, DE_MICRO);
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // DEFAULT
        //F|F1 |F2 |F3 |F4 |F5 | __ | __ | __ | __ | | __ | __ | __ | __ |F6 |F7 |F8 |F9 |F10|
        //N|F11| 1 | 2 | 3 | 4 | 5  | __ | __ | __ | | __ | __ | __ |  6 | 7 | 8 | 9 | 0 |F12|
        // |   | Q | W | E | R | T  | __ | __ | __ | | __ | __ | __ |  Y | U | I | O | P |   |
        //>|   | A | S | D | F | G  | __ | __ | __ | | __ | __ | __ |  H | J | K | L | - |   |
        // |   | Z | X | C | V | B  | Esc|Ctrl|LAlt| |NUMB|Del |Ret |  N | M | , | . | / |   |
        //L|Mag|Hom|End|Lft|Rgt| __ |SYMB|Shft|GERM| |Ins |Bksp|Spce| __ |Dwn|Up |PDn|PUp|Sys|
        // Spce: &mod_space_alt_tab
        // thumb cluster left mostly contains modifier keys
        // thumb cluster right contains whitespace keys
        default_layer {
            bindings =
                // function row (2 * 5 keys)
                <&kp F1 &kp F2 &kp F3 &kp F4 &kp F5>,
                <&kp F6 &kp F7 &kp F8 &kp F9 &kp F10>,

                // number row (2 * 6 keys)
                <&kp F11 &n1 &n2 &n3 &n4 &n5>,
                <&n6 &n7 &n8 &n9 &n0 &kp F12>,

                // upper row (2 * 6 keys)
                <&none &kp Q &kp W &kp E &kp R &kp T>,
                <&kp DE_Y &kp U &kp I &kp O &kp P &none>,

                // home row (2 * 6 keys)
                <&none &kp A &kp S &kp D &kp F &kp G>,
                <&kp H &kp J &kp K &kp L &kp DE_MINUS &none>,

                // lower row left (6 keys)
                <&none &kp DE_Z &kp X &kp C &kp V &kp B>,
                // tumb upper (6 keys)
                <&kp ESC &kp LCTRL &kp LALT &ht_mo_to NUMBLOCK NUMBLOCK &kp DEL &kp RET>,
                // lower row right (6 keys)
                <&kp N &kp M &kp DE_COMMA &kp DE_DOT &kp DE_SLASH &none>,

                // lowest left (5 keys)
                <&magic MAGIC 0 &kp HOME &kp END &kp LEFT &kp RIGHT>,
                // tumb lower (6 keys)
                <&mo SYMBOLS &kp LSHFT &mo GERMAN &kp INSERT &kp BSPC &mod_space_alt_tab>,
                // lowest right (5 keys)
                <&kp DOWN &kp UP &kp PG_DN &kp PG_UP &kp LGUI>
            ;
        };

        // SYMBOLS
        //F|   |   |   |   |   | __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |   |
        //N|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   | ? | = | { | } | '  | __ | __ | __ | | __ | __ | __ |  # | & | ! | % | + |   |
        //>|   | @ | * | ( | " | )  | __ | __ | __ | | __ | __ | __ |  < | $ |Pip| > | - |   |
        // |   | \ | ^ | [ | ] | `  |    |    |    | |    |    |    |  ~ | _ | ; | : | / |   |
        //L|Mag|   |   |   |   | __ |    |    |    | |SIns|    |    | __ |   |   |   |   |   |
        symbol_layer {
            bindings =
                // function row
                <&trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans>,

                // number row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // upper row
                <&trans &question &equal &lbrc &rbrc &sqt>,
                <&hash &amps &excl &percent &plus &trans>,

                // home row
                <&trans &at &star &lpar &dqt &rpar>,
                <&less_than &dollar &pipe &gt &minus &trans>,

                // lower row left
                <&trans &backslash &caret &lbkt &rbkt &grave>,
                // tumb upper
                <&trans &trans &trans &trans &trans &trans>,
                // lower row right
                <&tilde &underscore &semi &colon &slash &trans>,

                // lowest left
                <&trans &trans &trans &trans &trans>,
                // tumb lower
                <&trans &trans &trans &kp LS(INSERT) &trans &trans>,
                // lowest right
                <&trans &trans &trans &trans &trans>
            ;
        };

        // GERMAN
        //F|   |   |   |   |   | __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |   |
        //N|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   | Ã¸ |   |
        // |   |   |   | â¬ |   |    | __ | __ | __ | | __ | __ | __ |    | Ã |   | Ã | Â§ |   |
        //>|   | Ã | Ã |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   |   |   |   |   |    |    |    |    | |    |    |    |    | Âµ |   |   |   |   |
        //L|Mag|   |   |   |   | __ |    |    |    | |    |    |STab| __ |   |   |   |   |   |
        german_layer {
            bindings =
                // function row
                <&trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans>,

                // number row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &kp DE_AVG &trans>,

                // upper row
                <&trans &trans &trans &kp DE_EURO &trans &trans>,
                <&trans &kp DE_U_UMLAUT &trans &kp DE_O_UMLAUT &section &trans>,

                // home row
                <&trans &kp DE_A_UMLAUT &sz &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // lower row left
                <&trans &trans &trans &trans &trans &trans>,
                // tumb upper
                <&trans &trans &trans &trans &trans &trans>,
                // lower row right
                <&trans &micro &trans &trans &trans &trans>,

                // lowest left
                <&trans &trans &trans &trans &trans>,
                // tumb lower
                <&trans &trans &trans &trans &trans &kp LS(TAB)>,
                // lowest right
                <&trans &trans &trans &trans &trans>
            ;
        };


        // NUMBLOCK
        //F|   |   |   |   |   | __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |   |
        //N|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |  ^ |   |   |   | * |   |
        // |   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    | 7 | 8 | 9 | + |   |
        //>|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    | 4 | 5 | 6 | - |   |
        // |   |   |   |   |   |    |    |    |    | |DEFA|    |    |    | 1 | 2 | 3 | / |   |
        //L|Mag|   |   |   |   | __ |    |    |    | |    |    |    | __ | 0 | , | . | : |   |
        numblock_layer {
            bindings =
              // fuction row
              <&trans &trans &trans &trans &trans>,
              <&trans &trans &trans &trans &trans>,

              // number row
              <&trans &trans &trans &trans &trans &trans>,
              <&kp DE_CARET &none &none &none &kp DE_STAR &trans>,

              // upper
              <&none &none &none &none &none &none>,
              <&none &kp N7 &kp N8 &kp N9 &kp DE_PLUS &none>,

              // home row
              <&none &none &none &none &none &none>,
              <&none &kp N4 &kp N5 &kp N6 &kp DE_MINUS &none>,

              // lower
              <&none &none &none &none &none &none>,
              <&trans &none &trans &to DEFAULT &trans &trans>,
              <&trans &kp N1 &kp N2 &kp N3 &kp DE_SLASH &trans>,

              // lowest
              <&trans &none &none &none &none>,
              <&trans &trans &trans &trans &trans &trans>,
              <&kp N0 &kp DE_COMMA &kp DE_DOT &kp DE_COLON &trans>
            ;
        };

        // MAGIC
        //F|BtC|   |   |   |   | __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |BtC|
        //N|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   |RGB|RGB|RGB|RGB|RGB | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        //>|BLd|Spd|Sat|Hue|Brd|Efct| __ | __ | __ | | __ | __ | __ |    |   |   |   |   |BLd|
        // |Rst|   |   |   |   |    | BT2| BT3|    | |    |    |    |    |   |   |   |   |Rst|
        //L|Mag|   |   |   |   | __ | BT0| BT1| USB| |    |    |    | __ |   |   |   |   |   |
        magic_layer {
            bindings =
                <&bt BT_CLR &none &none &none &none>,
                <&none &none &none &none &bt BT_CLR_ALL>,

                <&none &none &none &none &none &none>,
                <&none &none &none &none &none &none>,

                <&none &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG>,
                <&none &none &none &none &none &none>,

                <&bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF>,
                <&none &none &none &none &none &bootloader>,

                <&sys_reset &none &none &none &none &none>,
                <&bt_2 &bt_3 &none &none &none &none>,
                <&none &none &none &none &none &sys_reset>,

                <&none &none &none &none &none>,
                <&bt_0 &bt_1 &out OUT_USB &none &none &none>,
                <&none &none &none &none &none>
            ;
        };

        // RGB
        //F|   |   |Cap|Num|Scr| __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |   |
        //N|DEF|SYM|GER|NUM|MAG|    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |UbL|UbL|UbL|UbL|UbL|UbL | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        //>|UbR|UbR|UbR|UbR|UbR|UbR | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   |   |   |   |   |    | BT2| BT3|    | |    |    |    |    |   |   |   |   |   |
        //L|Mag|   |   |   |   | __ | BT0| BT1| USB| |    |    |    | __ |   |   |   |   |   |


        // TEMPLATE
        //F|   |   |   |   |   | __ | __ | __ | __ | | __ | __ | __ | __ |   |   |   |   |   |
        //N|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        //>|   |   |   |   |   |    | __ | __ | __ | | __ | __ | __ |    |   |   |   |   |   |
        // |   |   |   |   |   |    |    |    |    | |    |    |    |    |   |   |   |   |   |
        //L|Mag|   |   |   |   | __ |    |    |    | |    |    |    | __ |   |   |   |   |   |
        template_layer {
            bindings =
                // function row
                <&trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans>,

                // number row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // upper row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // home row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // lower row
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,

                // lowest row
                <&trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans &trans>,
                <&trans &trans &trans &trans &trans>
            ;
        };
    };
};
